from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from app import keyboards as kb
from app import database as db
from dotenv import load_dotenv
import os
# from aiogram.utils.callback_data import CallbackData

storage = MemoryStorage()
load_dotenv()
bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher(bot=bot, storage=storage)


async def on_startup(_):
    await db.db_start()
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')


class registration(StatesGroup):
    first_name = State()
    surname = State()
    city = State()
    address = State()
    phone_number = State()
    cancel = State()

class NewOrder(StatesGroup):
    type = State()
    name = State()
    desc = State()
    price = State()
    photo = State()
    cancel = State()




# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞'
@dp.message_handler(state='*', commands='–û—Ç–º–µ–Ω–∞')
@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('Cancelled.', reply_markup=kb.admin_panel)


# -----------------------------------------------------–ö–æ–º–∞–Ω–¥—ã------------------------------------------------------
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await db.cmd_start_db(message.from_user.id)
    await message.answer(f'{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ñ–µ "–ú–µ–ª–∞–Ω–∂"!',
                         reply_markup=kb.main)
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(f'–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup=kb.main_admin)


@dp.message_handler(commands=['id'])
async def cmd_id(message: types.Message):
    await message.answer(f'{message.from_user.id}')


@dp.message_handler(commands=['menu'])
async def menu_command(message: types.Message):
    await db.sql_read(message)
    # await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ–Ω—é!',
    #                      reply_markup=kb.catalog_list)


@dp.message_handler(commands='address')
async def contact(message: types.Message):
    await message.answer(f'–ê–¥—Ä–µ—Å: –≥.–ü—Ä–æ—Ç–≤–∏–Ω–æ, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥.19 \n–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –≤—Å.- —á—Ç. —Å 10:00 –¥–æ 21:00 '
                         f'\n–ø—Ç.- —Å–±. —Å 10.00 –¥–æ 22.00')


@dp.message_handler(commands='contacts')
async def contacts(message: types.Message):
    await message.answer(f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: +7 (4967) 74-28-34')


# ----------------------------------------------–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é----------------------------------------------
@dp.message_handler(text='üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
async def contacts(message: types.Message):
    await message.answer(f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: +7 (4967) 74-28-34')


@dp.message_handler(text='üõç –ö–æ—Ä–∑–∏–Ω–∞')
async def shopcart(message: types.Message):
    dishes = await db.read_dishes_in_shopcart(message.from_user.id, message)
    result = ""
    sum = 0
    for dish in dishes:
        sum += int(dish[4]) * int(dish[2])
        result += f"{dish[0]}: {dish[4]} * {dish[2]} = {int(dish[4]) * int(dish[2])}\n"
    result += "\n"

    result += f"–ò—Ç–æ–≥–æ –ø–æ —á–µ–∫—É: {sum} —Ä—É–±."

    await bot.send_message(message.from_user.id, result, reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(f'–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='checkout')))




@dp.message_handler(text='üìç –ê–¥—Ä–µ—Å –∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã')
async def contacts(message: types.Message):
    await message.answer(f'–ê–¥—Ä–µ—Å: –≥.–ü—Ä–æ—Ç–≤–∏–Ω–æ, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥.19 \n–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –≤—Å.- —á—Ç. —Å 10:00 –¥–æ 21:00 '
                         f'\n–ø—Ç.- —Å–±. —Å 10.00 –¥–æ 22.00')


@dp.message_handler(text='‚ÜóÔ∏è –í–ö –∏ Instagram')
async def contacts(message: types.Message):
    await message.answer(f'–í—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–∞—à–∏ –≥—Ä—É–ø–ø—ã –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö. –¢–∞–º –≤—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è '
                         f'–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö –∏ —Ä–∞–±–æ—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞!'
                         f'\n–ù–∞—à –í–ö: https://vk.com/pro_melange'
                         f'\n–ù–∞—à Instagram: https://instagram.com/pro_melange?igshid=NTc4MTIwNjQ2YQ==')


@dp.message_handler(text='üçΩ –ú–µ–Ω—é')
async def menu_command(message: types.Message):
    # await db.sql_read(message)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é!', reply_markup=kb.catalog_list_menu)
    # await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ–Ω—é!',
    #                      reply_markup=kb.catalog_list)
    #                       # f'\n–ø—Ç.- —Å–±. —Å 10.00 –¥–æ 22.00', callback_data=dishes(action='get_all'))


# ------------------------------------------------- –ß–∞—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞---------------------------------------
# –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message_handler(commands='registration')
async def add_name(message: types.Message):
    await registration.first_name.set()
    await message.reply(f'–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:')


# –õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=registration.first_name)
async def add_name(message: types.callback_query, state: FSMContext):
    async with state.proxy() as data:
        data['first_name'] = message.text
    await message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:', reply_markup=kb.cancel)
    await registration.next()


# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=registration.surname)
async def add_surname(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.set_state(registration.cancel.state)

    async with state.proxy() as data:
        data['surname'] = message.text
    await message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥', reply_markup=kb.cancel)
    await registration.next()


# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å
@dp.message_handler(state=registration.city)
async def add_city(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.set_state(registration.cancel.state)

    async with state.proxy() as data:
        data['city'] = message.text
    await message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å', reply_markup=kb.cancel)
    await registration.next()


# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(state=registration.address)
async def add_address(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.set_state(registration.cancel.state)

    async with state.proxy() as data:
        data['address'] = message.text
    await message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    await registration.next()


# –õ–æ–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
@dp.message_handler(state=registration.phone_number)
async def add_phone(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.set_state(registration.cancel.state)

    async with state.proxy() as data:
        data['phone_number'] = message.text
    await db.add_registration(state)
    await message.answer('–í—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –∑–∞–∫–∞–∑! –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞!')
    await state.finish()


@dp.message_handler(text='–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
async def contacts(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(f'–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup=kb.admin_panel)
    else:
        await message.reply('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é.')


@dp.message_handler(text='–î–æ—Å—Ç–∞–≤–∫–∞')
async def delivery(message: types.Message):
    shopcart_id = await db.select_not_ordered_shopcart_by_account(message.from_user.id)
    await db.change_order_status('delivery', shopcart_id)
    #kkkkkk


@dp.message_handler(text='–°–∞–º–æ–≤—ã–≤–æ–∑')
async def pickup(message: types.Message):
    shopcart_id = await db.select_not_ordered_shopcart_by_account(message.from_user.id)
    await db.change_order_status('pickup', shopcart_id)
    # TODO: –ü–ï–†–ï–í–û–î –ù–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ


@dp.message_handler(text='–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ')
async def contacts(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é!', reply_markup=kb.main_admin)
    else:
        await message.answer(f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é!', reply_markup=kb.main)


@dp.callback_query_handler(lambda x: x.data and x.data.startswith('del '))
async def del_callback_run(callback_query: types.CallbackQuery):
    await db.delete_dish(callback_query.data.replace('del ', ''))
    await callback_query.answer(text=f'{callback_query.data.replace("del ", "")} —É–¥–∞–ª–µ–Ω–∞.', show_alert=True)


@dp.message_handler(text='–£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ')
async def delete_dish(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        read = await db.sql_read2()
        for ret in read:
            await bot.send_photo(message.from_user.id, ret[4], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–¶–µ–Ω–∞: {ret[3]}')
            await bot.send_message(message.from_user.id, text ='‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è', reply_markup=InlineKeyboardMarkup().\
                                   add(InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å {ret[1]}', callback_data=f'del {ret[1]}')))





# –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞
@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ')
async def add_dish(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await NewOrder.type.set()
        await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=kb.catalog_list)
    else:
        await message.reply('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é.')


# –õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@dp.callback_query_handler(state=NewOrder.type)
async def add_dish_type(call: types.callback_query, state: FSMContext):
    async with state.proxy() as data:
        data['type'] = call.data
    await call.message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞', reply_markup=kb.cancel)
    await NewOrder.next()


# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
@dp.message_handler(state=NewOrder.name)
async def add_dish_name(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.set_state(NewOrder.cancel.state)

    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞', reply_markup=kb.cancel)
    await NewOrder.next()


# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞
@dp.message_handler(state=NewOrder.desc)
async def add_dish_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['desc'] = message.text
    await message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É –±–ª—é–¥–∞', reply_markup=kb.cancel)
    await NewOrder.next()


# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ü–µ–Ω—É
@dp.message_handler(state=NewOrder.price)
async def add_dish_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = message.text
    await message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–ª—é–¥–∞')
    await NewOrder.next()


@dp.message_handler(lambda message: not message.photo, state=NewOrder.photo)
async def add_dish_photo(message: types.Message):
    await message.answer('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!')


# –õ–æ–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
@dp.message_handler(content_types=['photo'], state=NewOrder.photo)
async def add_dish_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    await db.add_dish(state)
    await message.answer('–ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', reply_markup=kb.admin_panel)
    await state.finish()

@dp.message_handler(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é')
async def cancel(message: types.Message):
    await message.reply('–ù–∞–∑–∞–¥', reply_markup=kb.main_admin)


@dp.message_handler(state=NewOrder.cancel)
async def add_dish_price(message: types.Message, state: FSMContext):
    await state.finish()
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é!', reply_markup=kb.main_admin)
    else:
        await message.answer(f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é!', reply_markup=kb.main)

# @dp.message_handler(text='–û—Ç–º–µ–Ω–∞')
# async def cancel_admin(message: types.Message):
#     if message.from_user.id == int(os.getenv('ADMIN_ID')):
#         await message.answer(f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é!', reply_markup=kb.main_admin)
#     else:
#         await message.answer(f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é!', reply_markup=kb.main)

@dp.message_handler()
async def answer(message: types.Message):
    await message.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.')


# --------------------------------------------------- –ú–µ–Ω—é--------------------------------------------
@dp.callback_query_handler(lambda c: c.data.startswith('menu_'))
async def callback_menu_catalog(callback_query: types.CallbackQuery):
    kind = callback_query.data.removeprefix('menu_')
    await db.read_dishes_by_kind(kind, callback_query.message)

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_from_catalog"))
    await bot.send_message(callback_query.message.chat.id, '–í—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –±–ª—é–¥–∞', reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == 'back_from_catalog')
async def callback_back_to_menu_catalog(callback_query: types.CallbackQuery):
    # await callback_query.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', )
    await bot.send_message(callback_query.message.chat.id, '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', reply_markup=kb.catalog_list_menu)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('add_to_shopcart_'))
async def callback_query_add_to_shopcart(callback_query: types.CallbackQuery):
    account_id = callback_query.from_user.id
    dish_id = callback_query.data.removeprefix('add_to_shopcart_')
    shopcart_id = await db.select_not_ordered_shopcart_by_account(account_id)
    if shopcart_id is None:
        shopcart_id = await db.create_shopcart(account_id)

    await db.add_dish_to_shopcart(dish_id, shopcart_id)

    await bot.send_message(callback_query.message.chat.id, '–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –±–ª—é–¥–æ!')
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data and c.data == 'checkout')
async def callback_query_checkout(callback_query: types.CallbackQuery):
    await callback_query.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:', reply_markup=kb.delivery_type_buttons)





@dp.callback_query_handler(lambda c: c.data and c.data.startswith('delete_from_shopcart_'))
async def callback_query_delete_from_shopcart(callback_query: types.CallbackQuery):
    account_id = callback_query.from_user.id
    dish_id = callback_query.data.removeprefix('delete_from_shopcart_')
    shopcart_id = await db.select_not_ordered_shopcart_by_account(account_id)
    if shopcart_id is None:
        await db.create_shopcart(account_id)
        await bot.send_message(callback_query.message.chat.id, '–ë–ª—é–¥–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ!')
        await callback_query.answer()
        return

    check_is_delete = await db.delete_from_shopcart(dish_id, shopcart_id)
    if not check_is_delete:
        await bot.send_message(callback_query.message.chat.id, '–ë–ª—é–¥–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ!')
    else:
        await bot.send_message(callback_query.message.chat.id, '–í—ã —É–¥–∞–ª–∏–ª–∏ –±–ª—é–¥–æ!')

    await callback_query.answer()


@dp.callback_query_handler()
async def callback_query_keyboard(callback_query: types.CallbackQuery):
    if callback_query.data == 'breakfast':
        await bot.send_message(chat_id=callback_query.from_user.id, text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–≤—Ç—Ä–∞–∫!')
    if callback_query.data == 'main_menu':
        await bot.send_message(chat_id=callback_query.from_user.id, text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é!')
    elif callback_query.data == 'pastries/desserts':
        await bot.send_message(chat_id=callback_query.from_user.id, text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—ã–ø–µ—á–∫—É –∏ –¥–µ—Å–µ—Ä—Ç—ã!')
    elif callback_query.data == 'drinkables':
        await bot.send_message(chat_id=callback_query.from_user.id, text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø–∏—Ç–∫–∏!')

# -------------------------------------------------------------------------------------------------------
if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)


# –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
# –≤—ã–≤–æ–¥ –∫–æ—Ä–∑–∏–Ω—ã
# —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
